diff --git a/agent_s3/config.py b/agent_s3/config.py
index 04946dc..801e5d3 100644
--- a/agent_s3/config.py
+++ b/agent_s3/config.py
@@ -2,56 +2,61 @@
 
 Handles configuration loading and default parameters.
 """
 
 import os
 import re
 import glob
 import json
 import time
 import logging
 import platform
 from pathlib import Path
 from typing import Optional, Dict, List, Any, Union
 
 from pydantic import BaseModel, ValidationError
 
 logging.basicConfig(level=logging.INFO)
 logger = logging.getLogger(__name__)
 
 # Default values
 _config_instance = None
 
 # Adaptive Configuration settings
 ADAPTIVE_CONFIG_ENABLED = os.getenv('ADAPTIVE_CONFIG_ENABLED', 'true').lower() == 'true'
 ADAPTIVE_CONFIG_REPO_PATH = os.getenv('ADAPTIVE_CONFIG_REPO_PATH', os.getcwd())
-ADAPTIVE_CONFIG_DIR = os.getenv('ADAPTIVE_CONFIG_DIR', os.path.join(ADAPTIVE_CONFIG_REPO_PATH, '.agent_s3', 'config'))
-ADAPTIVE_METRICS_DIR = os.getenv('ADAPTIVE_METRICS_DIR', os.path.join(ADAPTIVE_CONFIG_REPO_PATH, '.agent_s3', 'metrics'))
-ADAPTIVE_OPTIMIZATION_INTERVAL = int(os.getenv('ADAPTIVE_OPTIMIZATION_INTERVAL', '3600'))  # Default: optimize hourly
-ADAPTIVE_CONFIG_DIR = os.getenv('ADAPTIVE_CONFIG_DIR', os.path.join(ADAPTIVE_CONFIG_REPO_PATH, '.agent_s3', 'config'))
-ADAPTIVE_METRICS_DIR = os.getenv('ADAPTIVE_METRICS_DIR', os.path.join(ADAPTIVE_CONFIG_REPO_PATH, '.agent_s3', 'metrics'))
-ADAPTIVE_OPTIMIZATION_INTERVAL = int(os.getenv('ADAPTIVE_OPTIMIZATION_INTERVAL', '3600'))  # Default: optimize hourly
+ADAPTIVE_CONFIG_DIR = os.getenv(
+    'ADAPTIVE_CONFIG_DIR',
+    os.path.join(ADAPTIVE_CONFIG_REPO_PATH, '.agent_s3', 'config'),
+)
+ADAPTIVE_METRICS_DIR = os.getenv(
+    'ADAPTIVE_METRICS_DIR',
+    os.path.join(ADAPTIVE_CONFIG_REPO_PATH, '.agent_s3', 'metrics'),
+)
+ADAPTIVE_OPTIMIZATION_INTERVAL = int(
+    os.getenv('ADAPTIVE_OPTIMIZATION_INTERVAL', '3600')
+)  # Default: optimize hourly
 
 # Context Window Sizes (tokens)
 CONTEXT_WINDOW_SCAFFOLDER = int(os.getenv('CONTEXT_WINDOW_SCAFFOLDER', '16384'))
 CONTEXT_WINDOW_PLANNER = int(os.getenv('CONTEXT_WINDOW_PLANNER', '16384'))
 CONTEXT_WINDOW_GENERATOR = int(os.getenv('CONTEXT_WINDOW_GENERATOR', '16384'))
 # Context optimization settings
 CONTEXT_BACKGROUND_OPT_TARGET_TOKENS = int(os.getenv('CONTEXT_BACKGROUND_OPT_TARGET_TOKENS', '16000'))
 
 # Library parameters
 TOP_K_RETRIEVAL = int(os.getenv('TOP_K_RETRIEVAL', '10'))
 EVICTION_THRESHOLD = int(os.getenv('EVICTION_THRESHOLD', '10000'))
 VECTOR_STORE_PATH = os.getenv('VECTOR_STORE_PATH', '.cache')
 
 # Error recovery parameters
 MAX_RETRIES = int(os.getenv('MAX_RETRIES', '3'))
 INITIAL_BACKOFF = float(os.getenv('INITIAL_BACKOFF', '1.0'))
 BACKOFF_MULTIPLIER = float(os.getenv('BACKOFF_MULTIPLIER', '2.0'))
 FAILURE_THRESHOLD = int(os.getenv('FAILURE_THRESHOLD', '5'))
 COOLDOWN_PERIOD = int(os.getenv('COOLDOWN_PERIOD', '300'))
 
 # Default API parameters
 DEV_MODE = os.getenv('DEV_MODE', 'true').lower() == 'true'
 DEV_GITHUB_TOKEN = os.getenv('GITHUB_TOKEN', '')
 
 # LLM API error recovery parameters
