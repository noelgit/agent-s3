Modify `agent_s3/planner.py` and the UI integration so that:

1. **Structured Persona Debate**  
   - System prompt: load the four personas from `agent_s3/personas.md` and instruct the LLM to simulate a turn‑by‑turn debate among Business Development Manager, Expert Coder, Reviewer, and Validator about the user’s change request.  
   - After the debate, output a single JSON object with two keys:
     • **discussion**: a single string containing the full debate transcript,  
     • **plan**: the detailed, step‑by‑step implementation roadmap up to the module/file level,  
     

2. **UI Module Hook**  
   - Always display the full `discussion` transcript in the UI, followed immediately by the final `plan`.  

3. **GitHub Issue Confirmation**  
   - correct the existing function
   - After the user reviews `plan`, prompt with  
     `PromptModerator.ask_binary_question("Create a GitHub issue for this plan?")`.  
   - If the user answers “no,” abort subsequent steps (no issue, no code generation).  
   - If “yes,” proceed as before.  
   - If "modify", call the planner again (no need to pass through orchestrator anumore) but the new request will be the plan + modification.

4. **Orchestrator Integration & Retention of Existing Features**  
   - Keep the existing orchestrator routing to the `planner` role intact.  
   - Retain all current retry/backoff, circuit‑breaker, logging, and fallback logic.  

5. **Testing & Validation**  
   - Add unit tests for the new system prompt formatting in `planner.py`.  
   - Add UI tests verifying the `discussion` + `plan` payload renders correctly.  
   - Add tests ensuring the “Create a GitHub issue?” question aborts, modifies, or proceeds as expected.  